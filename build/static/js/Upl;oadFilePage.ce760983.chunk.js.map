{"version":3,"sources":["components/Fileupload/index.jsx","components/DocumentsTable/index.jsx","pages/UploadFile.jsx"],"names":["FileUpload","_ref","onFileUpload","onDrop","useCallback","acceptedFiles","length","file","type","alert","getRootProps","getInputProps","useDropzone","_jsxs","_objectSpread","style","dropzoneStyles","children","_jsx","border","borderRadius","padding","width","height","textAlign","cursor","DocumentsTable","documents","formatDate","inputDate","dateTime","Date","date","toLocaleDateString","time","toLocaleTimeString","formatMsToHMS","ms","seconds","Math","floor","minutes","hours","timeComponents","push","concat","join","columns","title","dataIndex","key","render","uploadeddate","completeddate","record","status","processingTime","_Fragment","Button","onClick","rowData","blob","Blob","fileContent","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","handleDownload","display","flexDirection","justifyContent","rowsProcessed","Progress","percent","processedPErcentage","size","totalRows","marginTop","async","response","fetch","API_BASE_URL","_id","method","ok","json","console","error","statusText","message","handleCancel","Spin","tableData","map","index","toString","createdAt","completedAt","requestCount","Table","rowKey","dataSource","Content","Layout","styles","content","margin","minHeight","maxWidth","alignItems","Uploadfile","uploadedFile","setUploadedFile","useState","isLoading","setIsLoading","documentId","setDocumentId","setDocuments","processingInfo","setProcessingInfo","setProcessedPercentage","useEffect","intervalId","setInterval","result","clearInterval","toFixed","fetchDocuments","data","forEach","item","some","doc","setTimeout","log","className","PageHeader","onBack","ghost","alignSelf","marginBottom","marginLeft","formData","FormData","append"],"mappings":"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","file":"static/js/Upl;oadFilePage.ce760983.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nexport default function FileUpload({ onFileUpload }) {\n    const onDrop = useCallback((acceptedFiles) => {\n        // Check if only one file is selected\n        if (acceptedFiles.length === 1) {\n            const file = acceptedFiles[0];\n            // Check if the file is a CSV\n            if (file.type === 'text/csv' || file.type === 'application/vnd.ms-excel') {\n                onFileUpload(file);\n            } else {\n                alert('Please upload a CSV file.');\n            }\n        } else {\n            alert('Please upload only one file.');\n        }\n    }, [onFileUpload]);\n\n    const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n    return (\n        <div {...getRootProps()} style={dropzoneStyles}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV file here, or click to select one</p>\n        </div>\n    );\n};\n\nconst dropzoneStyles = {\n    border: '2px dashed #ccc',\n    borderRadius: '4px',\n    padding: '20px',\n    width: '100%',\n    height: '300px',\n    textAlign: 'center',\n    cursor: 'pointer',\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Spin, Button, Progress } from \"antd\";\nimport { API_BASE_URL } from \"@/config/serverApiConfig\";\n\nconst DocumentsTable = ({ documents }) => {\n\n    const formatDate = (inputDate) => {\n        const dateTime = new Date(inputDate);\n        // Get date and time components\n        const date = dateTime.toLocaleDateString(); // Format: MM/DD/YYYY\n        const time = dateTime.toLocaleTimeString(); // Format: HH:MM:SS\n        return { date, time }\n    }\n\n    const formatMsToHMS = (ms) => {\n        const seconds = Math.floor((ms / 1000) % 60);\n        const minutes = Math.floor((ms / (1000 * 60)) % 60);\n        const hours = Math.floor(ms / (1000 * 60 * 60));\n\n        const timeComponents = [];\n\n        if (hours > 0) {\n            timeComponents.push(`${hours} hour${hours > 1 ? 's' : ''}`);\n        }\n\n        if (minutes > 0) {\n            timeComponents.push(`${minutes} minute${minutes > 1 ? 's' : ''}`);\n        }\n\n        if (seconds > 0 || (hours === 0 && minutes === 0)) {\n            timeComponents.push(`${seconds} second${seconds > 1 ? 's' : ''}`);\n        }\n\n        return timeComponents.join(' ');\n    }\n\n\n    const handleDownload = (rowData) => {\n        if (rowData) {\n            const blob = new Blob([rowData.fileContent], { type: 'text/csv' });\n            const url = window.URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"output-data.csv\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    };\n\n    const handleCancel = async (rowData) => {\n        try {\n            const response = await fetch(`${API_BASE_URL}cancelprocessing/${rowData._id}`, {\n                method: 'GET'\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n            } else {\n                console.error('Error cancelling processing:', response.statusText);\n            }\n        } catch (error) {\n            console.error('Error:', error.message);\n        }\n    };\n\n    const columns = [\n        {\n            title: \"Index\",\n            dataIndex: \"index\",\n            key: \"index\",\n        },\n        {\n            title: \"Uploaded Date\",\n            dataIndex: \"uploadeddate\",\n            key: \"uploadeddate\",\n            render: (uploadeddate) => {\n                const { date, time } = formatDate(uploadeddate)\n                return <span>{`${date} ${time}`}</span>\n            }\n        },\n        {\n            title: \"Completed Date\",\n            dataIndex: \"completeddate\",\n            key: \"completeddate\",\n            render: (completeddate, record) => {\n                const { date, time } = formatDate(completeddate)\n                return <span>{record.status === 'processing' ? \"\" : `${date} ${time}`}</span>\n            }\n        },\n        {\n            title: \"Status\",\n            dataIndex: \"status\",\n            key: \"status\",\n            render: (status) => {\n                return <span>{status}</span>;\n            },\n        },\n        {\n            title: \"Processing time\",\n            dataIndex: \"processingTime\",\n            key: \"processingTime\",\n            render: (processingTime) => {\n                return <span>{formatMsToHMS(processingTime)}</span>;\n            },\n        },\n        {\n            title: \"Proxy request count\",\n            dataIndex: \"requestCount\",\n            key: \"requestCount\",\n        },\n        {\n            title: \"Total rows\",\n            dataIndex: \"totalRows\",\n            key: \"totalRows\",\n        },\n        {\n            title: \"Download\",\n            dataIndex: \"status\",\n            key: \"status\",\n            render: (status, record) => (\n                <>\n                    {\n\n                        status === 'completed' ?\n                            <Button type=\"primary\" onClick={() => { handleDownload(record)}}>Download File</Button>\n                            :\n                        status === 'cancelled' ?\n                            <span>Cancelled</span>\n                            :\n                            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n\n                                {\n                                    record.rowsProcessed ?\n                                        <>\n                                            <Progress percent={record.processedPErcentage ? record.processedPErcentage : 0} size=\"small\" />\n                                            Processing {record.rowsProcessed}/{record.totalRows}\n                                            <Button type=\"primary\" style={{ marginTop: '10px' }} onClick={() => { handleCancel(record)}}>Cancel</Button>\n                                        </>\n                                        :\n                                        <Spin size=\"small\" />\n\n                                }\n                            </div>\n\n                    }\n                </>\n            ),\n        }\n    ];\n\n    if (!documents?.length) {\n        return <span>No previous data to show!</span>;\n    }\n\n\n    //Map events array to create table data\n    const tableData = documents.map((document, index) => {\n        return {\n            _id: document._id,\n            index: index.toString(),\n            uploadeddate: document.createdAt,\n            completeddate: document.completedAt,\n            status: document.status,\n            fileContent: document.fileContent,\n            processedPErcentage: document.processedPErcentage,\n            rowsProcessed: document.rowsProcessed,\n            totalRows: document.totalRows,\n            processingTime: document.processingTime,\n            requestCount: document.requestCount\n        };\n    });\n\n\n    return <Table rowKey={(document) => document.index} dataSource={tableData} columns={columns} />;\n};\n\nexport default DocumentsTable;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Layout, PageHeader } from \"antd\";\nimport { API_BASE_URL } from \"@/config/serverApiConfig\";\nimport FileUpload from \"../components/Fileupload\"\nimport { Spin, Progress } from \"antd\";\nimport DocumentsTable from \"@/components/DocumentsTable\";\n\nconst { Content } = Layout;\n\nconst styles = {\n    content: {\n        padding: \"0px 16px 16px 16px\",\n        margin: \"50px auto\",\n        width: \"100%\",\n        minHeight: \"600px\",\n        maxWidth: \"1200px\",\n        alignItems: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n    }\n};\n\n\nconst Uploadfile = () => {\n    const [uploadedFile, setUploadedFile] = useState(null);\n    const [isLoading, setIsLoading] = useState(false)\n    const [documentId, setDocumentId] = useState(null)\n    const [documents, setDocuments] = useState([])\n    const [processingInfo, setProcessingInfo] = useState({})\n    const [processedPErcentage, setProcessedPercentage] = useState(0)\n\n    useEffect(() => {\n        let intervalId;\n        if (documentId) {\n            intervalId = setInterval(async () => {\n                const response = await fetch(`${API_BASE_URL}documentstatus/${documentId}`, {\n                    method: 'GET'\n                });\n                if (response.ok) {\n                    const result = await response.json()\n                    if (result.status === \"completed\") {\n                        setUploadedFile(result.fileContent)\n                        setDocumentId(null)\n                        setIsLoading(false)\n                        clearInterval(intervalId)\n                    } else {\n                        const processingInfo = {\n                            totalRows: result?.totalRows ? result?.totalRows : 0,\n                            rowsProcessed: result?.rowsProcessed ? result?.rowsProcessed : 0,\n                            status: result?.status ? result?.status : 'processing'\n                        }\n                        const processedPErcentage = ((result?.rowsProcessed / result?.totalRows) * 100).toFixed(2)\n                        setProcessedPercentage(processedPErcentage)\n                        setProcessingInfo(processingInfo)\n                    }\n                }\n            }, 1000);\n        }\n        fetchDocuments()\n        return () => clearInterval(intervalId)\n    }, [documentId])\n\n\n    const fetchDocuments = async () => {\n        const response = await fetch(`${API_BASE_URL}documents/`, {\n            method: 'GET',\n        });\n\n        if (response.ok) {\n            const result = await response.json();\n            const data = result.data\n            data.forEach((item) => {\n                item.processedPErcentage = ((item.rowsProcessed / item.totalRows) * 100).toFixed(2)\n            })\n            setDocuments(data);\n\n            // Check if any document is still processing\n            const isProcessing = result.data.some((doc) => doc.status === 'processing');\n\n            // If any document is processing, call fetchDocuments again after 3 seconds\n            if (isProcessing) {\n                setTimeout(fetchDocuments, 1000);\n            }\n        }\n    };\n\n    useEffect(() => {\n        fetchDocuments();\n    }, []);\n\n\n\n    const handleFileUpload = async (file) => {\n        setIsLoading(true);\n\n        try {\n            // Create FormData and append the file\n            const formData = new FormData();\n            formData.append('file', file);\n\n            // Perform API call with FormData\n            const response = await fetch(`${API_BASE_URL}uploadFile`, {\n                method: 'POST',\n                body: formData\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                // Handle the response from the server if needed\n                setDocumentId(result?.result._id)\n                setUploadedFile(result.fileContent)\n            } else {\n                console.error('Error uploading file:', response.statusText);\n            }\n        } catch (error) {\n            console.error('Error:', error.message);\n        }\n    };\n\n    const handleDownload = (uploadedFile) => {\n        if (uploadedFile) {\n            const blob = new Blob([uploadedFile], { type: 'text/csv' });\n            const url = window.URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"output-data.csv\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    };\n\n    console.log('Processing info', processingInfo)\n    return (\n        <Layout className=\"site-layout\">\n            <Content className=\"site-layout-background\" style={styles.content}>\n                <PageHeader\n                    title={\"Upload CSV file\"}\n                    onBack={\n                        () => {\n                            setIsLoading(false);\n                            setUploadedFile(null)\n                        }\n                    }\n                    ghost={false}\n                    style={{\n                        alignSelf: \"flex-start\",\n                        padding: \"20px 0px\",\n                    }}\n                ></PageHeader>\n                {\n                    processingInfo.status !== 'cancelled' &&\n                    isLoading &&\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n                        <Spin size=\"large\" />\n                        {\n                            processingInfo.totalRows > 0 &&\n                            <>\n                                <div style={{ marginTop: '46px', marginBottom: '50px' }}>{`Processing ${processingInfo.rowsProcessed}/${processingInfo.totalRows} rows. Please wait...`}</div>\n                                <Progress type=\"circle\" percent={processedPErcentage} style={{ marginTop: '16px', marginBottom: '50px', marginLeft: '55px' }} />\n                            </>\n                        }\n                    </div>\n                }\n                {\n                    uploadedFile && !isLoading ?\n                        <Button type=\"primary\" onClick={() => handleDownload(uploadedFile)}>Download File</Button>\n                        :\n                        <>\n                            {!isLoading && <FileUpload onFileUpload={handleFileUpload} />}\n                        </>\n\n                }\n\n                {\n                    documents.length > 0 &&\n                    <div style={{display: 'flex', marginTop: '30px'}}>\n                        <DocumentsTable documents={documents}></DocumentsTable>\n                    </div>\n                }\n\n\n\n            </Content>\n        </Layout>\n    );\n};\n\nexport default Uploadfile;\n"],"sourceRoot":""}